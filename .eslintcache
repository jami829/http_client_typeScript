[{"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_reducers/index.js":"1","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_reducers/todo_reducer.js":"2","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/App.tsx":"3","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/index.tsx":"4","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Button.js":"5","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Nav.tsx":"6","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignOut.tsx":"7","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Welcome.tsx":"8","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/routes/MyPage.tsx":"9","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Remove.tsx":"10","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Edit.tsx":"11","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Remove_completed.tsx":"12","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoListItem.js":"13","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignIn.tsx":"14","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoTemplate.js":"15","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_actions/todo_action.js":"16","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoList.js":"17","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/routes/ToDo.js":"18","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignUp.tsx":"19","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_account.tsx":"20","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_Email_completed.tsx":"21","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_PW_completed.tsx":"22"},{"size":156,"mtime":1611667107447,"results":"23","hashOfConfig":"24"},{"size":719,"mtime":1611667107448,"results":"25","hashOfConfig":"26"},{"size":6910,"mtime":1611848041892,"results":"27","hashOfConfig":"24"},{"size":756,"mtime":1611668551098,"results":"28","hashOfConfig":"24"},{"size":464,"mtime":1611667107450,"results":"29","hashOfConfig":"26"},{"size":1242,"mtime":1611832420356,"results":"30","hashOfConfig":"24"},{"size":1529,"mtime":1611771713336,"results":"31","hashOfConfig":"24"},{"size":275,"mtime":1611832434964,"results":"32","hashOfConfig":"24"},{"size":3389,"mtime":1611832561042,"results":"33","hashOfConfig":"24"},{"size":3038,"mtime":1611763323592,"results":"34","hashOfConfig":"24"},{"size":2684,"mtime":1611735013970,"results":"35","hashOfConfig":"24"},{"size":1333,"mtime":1611771762600,"results":"36","hashOfConfig":"24"},{"size":1646,"mtime":1611667107469,"results":"37","hashOfConfig":"24"},{"size":9923,"mtime":1611847101499,"results":"38","hashOfConfig":"24"},{"size":313,"mtime":1611667107472,"results":"39","hashOfConfig":"24"},{"size":1186,"mtime":1611667107445,"results":"40","hashOfConfig":"24"},{"size":1139,"mtime":1611667107468,"results":"41","hashOfConfig":"24"},{"size":4242,"mtime":1611766808587,"results":"42","hashOfConfig":"24"},{"size":7819,"mtime":1611851294604,"results":"43","hashOfConfig":"24"},{"size":8494,"mtime":1611853057275,"results":"44","hashOfConfig":"24"},{"size":875,"mtime":1611854137007,"results":"45","hashOfConfig":"24"},{"size":718,"mtime":1611854360944,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1kxj8of",{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"inc0fj",{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_reducers/index.js",[],[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_reducers/todo_reducer.js",["107","108"],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/App.tsx",["109","110","111","112","113","114","115"],"import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\n// css\nimport './App.css';\nimport Nav from './components/Nav';\nimport Remove from './components/Remove';\nimport Remove_completed from './components/Remove_completed';\nimport SignInModal from './components/SignIn';\nimport MyPage from './routes/MyPage';\nimport ToDo from './routes/ToDo';\nimport ImportantTodo from './components/Todo/ImportantTodo';\nimport SignUpModal from './components/SignUp';\nimport FindAccount from './components/Find_account';\nimport CompletedFindEmail from './components/Find_Email_completed';\nimport CompletedFindPw from './components/Find_PW_completed';\nimport Edit from './components/Edit';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n\n  const [login, setLogin] = useState<{\n    isLogin: boolean;\n    userId: string | null;\n    email: string | null;\n    password: string;\n    name: string | null;\n    mobile: string;\n    errorMessage: string;\n  }>({\n    isLogin: false,\n    userId: \"\",\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    mobile: \"\",\n    errorMessage: \"\"\n  })\n  const [todos, setTodos] = useState<any>([])\n\n  const History = useHistory();\n\n  const {\n    isLogin,\n    userId,\n    email,\n    name,\n    password,\n    mobile\n  } = login\n\n  console.log(name)\n\n  // 세션 저장소에 저장된 id를 불러와 req하자.\n  const handleResponseSuccess = (): void => {\n    axios\n      .post(\"https://api.get-todo.com/getMain\", {\n        id: window.sessionStorage.getItem(\"id\"),\n      })\n      // axios({\n      //   method: \"GET\",\n      //   url: \"https://api.get-todo.com/getMain\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //     // accept: \"application/json\",\n      //     // Cookie: window.sessionStorage.getItem(\"id\"),\n      //     withCredentials: true,\n      //     credentials: \"include\",\n      //   },\n      // })\n      // axios.get(\"https://api.get-todo.com/getMain\", {\n      //   withCredentials: true\n      // })\n      .then((res) => {\n        console.log(\"메인2 성공\", res.data);\n        setTodos({ todos: res.data });\n      })\n      .catch((error) => {\n        console.log(\"메인2 에러\", error.response);\n      });\n    setLogin({\n      ...login,\n      isLogin: true,\n      email: window.sessionStorage.getItem(\"email\"),\n      userId: window.sessionStorage.getItem(\"id\"),\n      name: window.sessionStorage.getItem(\"name\"),\n    });\n  };\n\n\n\n\n  const handleSignOut = () => {\n    setLogin({\n      ...login,\n      isLogin: false,\n      email: \"\",\n      password: \"\",\n      name: \"\",\n      mobile: \"\"\n    })\n    // alert(\"로그아웃이 되었습니다.\")\n    doSignOut();\n  }\n\n  const doSignOut = (): void => {\n    window.sessionStorage.clear();\n  }\n\n  // Edit 컴포넌트의 결과를 끌어올린다.\n  const adoptModifiedInfo = (data: any) => {\n    if (data.email !== \"\") setLogin({ ...login, email: data.email });\n    if (data.password !== \"\") setLogin({ ...login, password: data.password });\n    if (data.name !== \"\") setLogin({ ...login, name: data.name });\n    if (data.mobile !== \"\") setLogin({ ...login, mobile: data.mobile });\n  };\n  // ToDo 컴포넌트의 결과를 끌어올린다.\n  const adoptRecentTodo = (data: any) => {\n    setTodos({ todos: data });\n  };\n\n  useLayoutEffect(() => {  // useEffect로 하면 새로고침 시 아주 잠시동안 로그아웃상태가 됨, 둘의 성격차이를 보면 알 수 있음.\n    // login\n\n    const userEmail = window.sessionStorage.getItem(\"email\");\n    if (userEmail) {\n      // return () => handleResponseSuccess();\n      handleResponseSuccess();\n    } else {\n      // handleSignOut();\n      // window.sessionStorage.clear();\n    }\n    // adoptRecentTodo;\n    // console.log(\"메인2 변경감지\", this.state);\n\n  }, [email])\n\n  // useLayoutEffect(() => {\n  //   const userEmail = window.sessionStorage.getItem(\"email\");\n  //   if (userEmail) {\n  //     // History.push(\"/\");\n  //     try {\n  //       handleResponseSuccess();\n  //     }\n  //     catch {\n  //       // window.sessionStorage.clear();\n  //     }\n  //   }\n  // }, [email])\n\n  console.log(\"login\", login)\n\n\n  return (\n    <Router>\n      <div className=\"menu\">\n        <Nav resetLogin={handleSignOut} loginUserInfo={login} />\n      </div>\n      <div className=\"screen\">\n        <Route\n          path={\"/\"}\n          exact={true}\n          render={() =>\n            isLogin ? ( // 새로고침해도 로그인 상태를 유지시키기 위해 localstorage에 저장된 정보를 사용한다. local storage는 사용자가 지우지 않는 이상 영구적으로 계속 브라우저에 남아있음 (단, session storage는 브라우저가 닫은 겨우 사라지고, 브라우저 내에서 탬을 생성하는 경우에도 별도의 영역으로 할당됨.)\n              <ToDo\n                userId={userId}\n                email={email}\n                name={name}\n                todos={todos}\n                adoptRecentTodo={adoptRecentTodo}\n              />\n            ) : (\n                <SignInModal\n                  handleResponseSuccess={handleResponseSuccess}\n                />\n              )\n          }\n        />\n        <Route path={\"/todo\"} component={ToDo} />\n        <Route\n          path=\"/mypage\"\n          render={() =>\n            // isLogin ? (\n            <MyPage\n              id={userId}\n              name={name}\n              email={email}\n              password={password}\n              mobile={mobile}\n              adoptModifiedInfo={adoptModifiedInfo}\n              signOut={handleSignOut}\n            />\n            // ) : (\n            //   <MyPage />\n            // )\n          }\n        />\n        { // 시우님께 여쭤보기\n        /* <Route\n          path={\"/important\"}\n          render={() =>\n            <ImportantTodo\n              todos={() => {\n                axios\n                  .get(\"https://api.get-todo.com/important\", userId)\n                  .then((res) => res.data);\n              }}\n            />\n          }\n        /> */}\n        <Route path={\"/signup\"} component={SignUpModal} />\n        <Route path={\"/findaccount\"} component={FindAccount} />\n        <Route path={\"/useremail\"} component={CompletedFindEmail} />\n        <Route path={\"/userpw\"} component={CompletedFindPw} />\n        <Route path={\"/edit\"} component={Edit} />\n        <Route path={\"/remove\"} render={() => <Remove signOut={handleSignOut} pass={password} />} />\n        {/* <Route path={\"/remove\"} signOut={handleSignOut} pass={login.password} >\n          <Remove />\n        </Route> */}\n        {/* <Route path={\"/remove\"} component={Remove} /> */}\n        <Route path={\"/remove_user_completed\"} component={Remove_completed} signOut={handleSignOut} />\n      </div>\n      <div className=\"footer\">\n        <Footer />\n      </div>\n    </Router>\n  )\n}\n\nexport default App;","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/index.tsx",["116"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// 리덕스 사용\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport promiseMiddleware from \"redux-promise\";\nimport ReduxThunk from \"redux-thunk\";\nimport Reducer from \"./_reducers\";\n\n\nconst createStoreWithMiddleware = applyMiddleware(\n  promiseMiddleware,\n  ReduxThunk\n)(createStore);\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__?: any\n  }\n}\n\nReactDOM.render(\n  <Provider\n    store={createStoreWithMiddleware(\n      Reducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__()\n    )}\n  >\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Button.js",["117","118"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.button`\n  border: none;\n  border-radius: 4px;\n  font-weight: bolder;\n  font-size: 1rem;\n  margin-top: 1rem;\n  :center ;\n  text-decoration: none;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  background: hotpink;\n  &:hover {\n    background: #6a9bcc;\n  }\n`;\n\nconst Button = (props) => <StyledButton {...props} />;\nexport default Button;\n",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Nav.tsx",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignOut.tsx",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Welcome.tsx",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/routes/MyPage.tsx",["119","120","121","122"],"import React, { useEffect, useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\n\n// components\nimport Remove from \"../components/Remove\";\nimport Edit from \"../components/Edit\";\nimport Button from \"../components/Button\";\nimport \"./MyPage.scss\";\n\ninterface Props {\n  id: string | null;\n  name: string | null;\n  email: string | null;\n  password: string;\n  mobile: string;\n  adoptModifiedInfo: (data: any) => void;\n  signOut: () => void;\n}\n\nconst MyPage: React.FC<Props> = (props) => {\n\n  console.log(\"myProps\", props)\n\n\n  const [mypageInfo, setMypageInfo] = useState<{\n    email: string | null;\n    password: string;\n    name: string | null;\n    mobile: string;\n  }>({\n    email: props.email,\n    password: props.password,\n    name: props.name,\n    mobile: props.mobile\n  })\n  const makeChange = (data: any) => {\n    if (data.password !== \"\") setMypageInfo({ ...mypageInfo, password: data.password });\n    if (data.name !== \"\") setMypageInfo({ ...mypageInfo, name: data.name });\n    props.adoptModifiedInfo(data);\n  }\n\n  useEffect(() => {\n    mypageInfo;\n    makeChange;\n  })\n\n  const { email, name } = mypageInfo;\n\n  return (\n    <>\n      <br />\n      <br />\n      <section className=\"mypage\">\n        <div className=\"myinfo-title\">&#129296; 회원정보</div>\n        <div>\n          <div className=\"email-info\">\n            <div className=\"description\">e-mail</div>\n            <div className=\"print\">{email}</div>\n          </div>\n          <div className=\"pw-info\">\n            <div className=\"description\">PW</div>\n            <div className=\"print\">******</div>\n          </div>\n          <div className=\"name-info\">\n            <div className=\"description\">고객명</div>\n            <div className=\"print\">{name}</div>\n          </div>\n          <div className=\"mobile-info\">\n            <div className=\"description\">연락처</div>\n            <div className=\"print\">010-****-****</div>\n          </div>\n        </div>\n        <div className=\"myinfobox\">\n          <div>\n            <Button>\n              {/* props내리기 --> 아래와 같이 작성하면 props.location 혹은 props.history.location에 아래 정보가 담겨 전달\n                    전달받은 Remove.js는 this.props.location 혹은 this.props.history.location에 담긴 pw를 사용할 수 있음\n                */}\n              <Link\n                to={{\n                  pathname: \"/remove\",\n                  // state: {\n                  //   password: props.password,\n                  // },\n                  // signOut: props.signOut, // 메소드화가 되어 전달되어질 것. ex) signOut();\n                }}\n\n                style={{ color: `white`, textDecoration: `none` }}\n\n              // to={\"/remove\"}\n              // style={{ textDecoration: \"none\", color: \"white\" }}\n              // email={email}\n              // password={password}\n              // name={name}\n              // mobile={mobile}\n              >\n                회원탈퇴\n                </Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n      <br />\n      <br />\n      <br />\n      <hr />\n      <br />\n      <br />\n      <br />\n      <section>\n        <Edit\n          // to={\"/edit\"}\n          // style={{ textDecoration: \"none\", color: \"black\" }}\n          makeChange={makeChange}\n        />\n      </section>\n    </>\n  )\n}\n\n\n\nexport default MyPage;\n",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Remove.tsx",["123","124","125"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { NavLink, RouteComponentProps, useHistory } from \"react-router-dom\";\nimport Button from \"./Button\";\nimport ReactRouterPropTypes from \"../../node_modules/react-router-prop-types\"\n\n\n\n//fakedate\n// import user from \"../test_data_user.json\";\n\n// interface MatchParam {\n//   signOut: () => void;\n//   state: {\n//     password: string;\n//   }\n\n// }\n// interface RemoveProps extends RouteComponentProps<any> {\n//   signOut: () => void;\n//   state: {\n//     password: string;\n//   }\n// }\n// type RemoveProps = RouteComponentProps<any>;\n\ninterface removeProps {\n  // extends RouteComponentProps {\n  pass?: string;\n  signOut: () => void;\n}\n\n// function Remove(props: removeProps) {\nconst Remove: React.FC<removeProps> = (props) => {\n  console.log(\"remove\", props)\n  const [modal, setModal] = useState<boolean>(true);\n  const [input, setInput] = useState<{ password?: string, errorMessage?: string }>({ password: \"\", errorMessage: \"\" })\n\n  const History = useHistory()\n\n  const closeModal = () => {\n    setModal(\n      false\n    )\n    // window.history.go(-1)\n    History.push(\"/mypage\")\n  }\n\n  const handleInputValue = (key: string) => (text: React.ChangeEvent<HTMLInputElement>) => {\n    // key: password 아래 렌더부분에 설정해놈.\n    setInput({\n      [key]: text.target.value\n    })\n    // console.log(\"removeInput\", input.password)\n  }\n\n  const handleClickRemoveUserInfo = () => {\n    const inputPw = {\n      password: input.password\n    }\n\n    axios.post(\"https://api.get-todo.com/remove\", inputPw)\n      .then((response) => {\n        console.log(\"handleClickRemoveUserInfo\", response)\n      })\n    props.signOut()\n    History.push({\n      pathname: \"/remove_user_completed\",\n    })\n  }\n\n  return (\n    <>\n      {modal === true ?\n        (<div className=\"modal\">\n          <div className=\"modal_overlay\" onClick={closeModal}></div>\n          <div className=\"modal_content\">\n            <h1>회원탈퇴</h1>\n\n            <div className=\"container\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                <div className=\"container1\">\n                  <div>비밀번호를 입력하세요.</div>\n                  <div>\n                    <span>PW</span>\n                    <input\n                      type=\"password\"\n                      onChange={handleInputValue(\"password\")}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <div>{input.errorMessage}</div>\n\n                  <Button\n                    className=\"signUp_btn\"\n                    onClick={handleClickRemoveUserInfo}\n                  >\n                    계정 삭제\n                </Button>\n\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        ) : null}\n    </>\n  )\n}\n\n// Remove.propTypes = {\n//   history: ReactRouterPropTypes.history.isRequired\n// }\n\nexport default Remove;\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Edit.tsx",["126","127","128","129"],"import { string } from \"prop-types\";\nimport React, { useCallback, useReducer } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// components\nimport Button from \"./Button\";\n\nimport \"./Edit.scss\";\n\n/*****************************************************************\n                            리액트 훅 명세표\n\n(1) useReducer\n - Input 개체가 다수일 때, 이것들에 의한 state 변화를 한번에 관리하기 위함\n - 클래스 컴포넌트에서 e.target.value들에 대한 setState를 한번에 한 것과 동일\n - \n\n(2) useCallback\n - ToDo.js 컴포넌트의 주석 참조 부탁드립니다.\n******************************************************************/\n\ninterface State {\n  password: string;\n  name: string;\n}\n\n// reducer hook 액션 정의\nfunction reducer(state: State, action: any) {\n  return {\n    ...state,\n    [action.name]: action.value,\n  };\n}\n\ninterface editProps {\n  makeChange: (data: any) => void;\n}\n\n\nconst Edit: React.FC<editProps> = (props) => {\n  // reducer hook으로 한꺼번에 state 관리할 대상 정의\n  const [state, dispatch] = useReducer(reducer, {\n    password: \"\",\n    name: \"\",\n  });\n\n  const { password, name } = state;\n\n  // reducer hook 구동 대상(\"액션값\")은 \"이벤트 객체(e.target 값)\"라고 설정\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(e.target);\n  };\n\n  // reducer hook 구동 결과(state)를 부모(MyPage.js) 컴포넌트로 끌어올리기\n  const onClick = useCallback(() => {\n    console.log(`제출!! =======>\n    최종제출 비밀번호: ${state.password}\n    최종제출 이름: ${state.name}\n    `);\n\n    props.makeChange(state);\n  }, [props.makeChange, state]);\n\n  return (\n    <>\n      <section className=\"editpage\">\n        <div className=\"myinfo-title\">&#9997; 회원정보 수정</div>\n        <div>\n          <div>\n            <div className=\"description\">PW</div>\n            <input\n              className=\"editbox\"\n              type=\"text\"\n              name=\"password\"\n              value={password}\n              placeholder=\"변경할 비밀번호를 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n          <div>\n            <div className=\"description\">고객명</div>\n            <input\n              className=\"editbox\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              placeholder=\"변경할 고객명을 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n        </div>\n      </section>\n      <div>\n        <Button onClick={onClick}>수정</Button>\n      </div>\n    </>\n  );\n};\n\nexport default Edit;\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Remove_completed.tsx",["130"],"import React from \"react\";\nimport { useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\"\nimport Button from \"./Button\";\n\ninterface RemoveUserCompletedState {\n  isModalOpen: boolean\n}\nconst RemoveUserCompleted: React.FC<RemoveUserCompletedState> = (props) => {\n\n  const [modal, setModal] = useState<boolean>(true)\n  const History = useHistory();\n\n  const closeModal = () => {\n    setModal(\n      false\n    )\n    // this.props.history.push(\"/\")\n    History.push(\"/\")\n\n  };\n\n\n  return (\n    <>\n      { modal === true ?\n        <div className=\"modal\">\n          <div className=\"modal_overlay\" onClick={closeModal}></div>\n          <div className=\"modal_content\">\n            <h1>회원 탈퇴</h1>\n\n            <div className=\"container\">\n\n              <div className=\"container1\">\n\n                <div>\n                  회원 탈퇴가 완료되었습니다.\n                </div>\n\n              </div>\n              <div>\n                <NavLink to=\"/\" className='signUp_link'>\n                  <Button\n                    className=\"signUp_btn\"\n                  >\n                    로그인 페이지\n                </Button>\n                </NavLink>\n              </div>\n\n            </div>\n          </div>\n        </div>\n        : null}\n    </>\n  );\n}\n\n\nexport default RemoveUserCompleted;\n",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoListItem.js",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignIn.tsx",["131","132","133","134","135"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"../image/logo.png\";\n// import user from \"../test_data_user.json\";\nimport axios from \"axios\";\nimport { any, number, string } from \"prop-types\";\n\ninterface SignInModalProps {\n    handleResponseSuccess: () => void;\n}\n\nconst SignInModal: React.FC<SignInModalProps> = (props) => {\n\n    // const [id, setId] = useState<string>(\"\")\n    // const [email, setEmail] = useState<string>(\"\")\n    // const [name, setName] = useState<string>(\"\")\n    // const [password, setPassword] = useState<string>(\"\")\n    // const [errorMessage, setErrorMessage] = useState<string>(\"\")\n\n\n    const [userInfo, setUserInfo] = useState<{\n        id: string;\n        email: string;\n        name: string;\n        password: string;\n        errorMessage: string;\n    }>({\n        id: \"\",\n        email: \"\",\n        name: \"\",\n        password: \"\",\n        errorMessage: \"\"\n    })\n    // const [userInfo, setUserInfo] = useState({\n    //     id: \"\",\n    //     email: \"\",\n    //     name: \"\",\n    //     password: \"\",\n    //     errorMessage: \"\"\n    // })\n\n    // const [userInfo, setuserInfo] = useState<{\n    //     email?: string;\n    //     password?: string;\n    // }>({\n    //     email: \"\",\n    //     password: \"\"\n    // })\n\n    const { id, email, name, password, errorMessage } = userInfo;\n\n    // console.log(\"props\", this.props); // App.js 로부터 handleResponseSuccess()가 내려옴\n    /* ----------------소셜 로그인------------------- */\n    /* ----------------로그인----------------------- */\n    // console.log(\"name\", name)\n    // // const { email, password } = userInfo\n    // console.log(\"string obeject\", userInfo)\n    // console.log(\"email\", email)\n    // console.log(\"pw\", password)\n    // e-mail, pw 입력 기능\n    const hadleInputValue = (key: string) => (text: React.ChangeEvent<HTMLInputElement>) => {\n        setUserInfo({\n            ...userInfo,\n            [key]: text.target.value,\n        });\n        console.log(\"ㅁㄴㅇㄹㅁㄴㅇ\", text.target.value)\n    };\n    const handleSignIn = () => {\n        // const signInfo = {\n        //     email: userInfo.email,\n        //     password: userInfo.password,\n        // };\n        // console.log(\"handlelength\", email)\n\n\n        if (!email.length || !password.length) {\n            setUserInfo({\n                ...userInfo,\n                errorMessage: \"e-mail과 비밀번호를 입력하세요.\",\n            });\n        } else {\n            axios\n                .post(\"https://api.get-todo.com/signin\", userInfo)\n                .then((response) => {\n                    // console.log(\"뭘받아와?\", response);\n                    // setUserInfo({\n                    //     ...userInfo,\n                    //     id: response.data.id, // 서버에서 생성 및 전달받은 고유 유저id\n                    //     // name: \"zxc\",\n                    //     name: response.data.name,\n                    //     email: response.data.email,\n                    // })\n                    window.sessionStorage.setItem(\"id\", response.data.id)\n                    window.sessionStorage.setItem(\"name\", response.data.name)\n                    window.sessionStorage.setItem(\"email\", response.data.email)\n                    console.log(\"axiosthen\", userInfo)\n                    console.log(\"response\", response.data.name)\n\n                    doSignIn();\n                })\n                .catch((error) => {\n                    console.log(\"??\", error.response)\n                    setUserInfo({\n                        ...userInfo,\n                        errorMessage: error.response.data,\n                    });\n                    console.log(\"axios\", userInfo.errorMessage)\n                });\n        }\n\n        /*     fakedata 용 코드\n                for (let i = 0; i < user.length; i++) {\n                  if (!signInfo.email.length || !signInfo.password.length) {\n                    this.setState({\n                      errorMessage: \"e-mail과 PW를 입력하세요.\",\n                    });\n                  }\n                  //* 입력이 된 값으로 서버에 로그인 요청을 하고, props로 전달된 callback을 호출\n                  // else {  //! 추후 알맞게 수정하기, 우선은 fackdata로\n                  //     axios.post('http://localhost:8000/', signInfo)\n                  //         .then(res => {\n                  //             this.props.handleResponseSuccess()\n                  //         })\n                  //         .catch(error => {\n                  //             this.setState({\n                  //                 errorMessage: 'e-mail 혹은 PW가 일치하지 않습니다.'\n                  //             })\n                  //         })\n                  // }\n                  else {\n                    if (\n                      user[i].email === this.state.email &&\n                      user[i].password === this.state.password\n                    ) {\n                      // this.doSignIn();\n                      this.doSignIn();\n                    } else\n                      this.setState({\n                        errorMessage: \"e-mail 혹은 PW가 일치하지 않습니다.\",\n                      });\n                  }\n                  // console.log(user)\n                } */\n    };\n    console.log(\"사인 state\", userInfo);\n    //! session storage에 저장하여 로그인을 유지시킨다.\n    const doSignIn = () => {\n        // const { id, name } = userInfo;\n        // console.log(\"dosignin\", email)\n        // window.sessionStorage.setItem(\"id\", id);\n        // window.sessionStorage.setItem(\"email\", email);\n        // window.sessionStorage.setItem(\"name\", name);\n        // const { id, name } = userInfo;\n        // const { email } = userInfo;\n\n        // window.sessionStorage.setItem(\"id\", userInfo.id!);\n        // window.sessionStorage.setItem(\"name\", userInfo.name!);\n        // window.sessionStorage.setItem(\"email\", userInfo.email!);\n        props.handleResponseSuccess(); // App.js로 state 끌어올려서 App.js의 isLogin을 true로 변경해주어 홈경로 또한 바뀌고 동시에 컴포넌트도 todo로 변경된다.\n    };\n\n    // useLayoutEffect(() => {\n    //     console.log(\"layout\", userInfo)\n    //     // window.sessionStorage.setItem(\"id\", id);\n    //     // window.sessionStorage.setItem(\"email\", email);\n    //     // window.sessionStorage.setItem(\"name\", name);\n    // })\n    useEffect(() => {\n        console.log(\"effect\", userInfo)\n\n        // window.sessionStorage.setItem(\"id\", id)\n        // window.sessionStorage.setItem(\"email\", email)\n        // window.sessionStorage.setItem(\"name\", name)\n\n    }, [id, email, name]);\n    // }, []);\n\n    // window.sessionStorage.setItem(\"id\", id)\n    // window.sessionStorage.setItem(\"email\", email)\n    // window.sessionStorage.setItem(\"name\", name)\n    window.sessionStorage.setItem(\"sdf\", \"asdf\")\n\n\n    console.log(\"사인인,세션저장소\", window.sessionStorage);\n    return (\n        <div className=\"modal hidden\">\n            <div className=\"modal_overlay\"></div>\n            <div className=\"modal_content\">\n                <h1>너의 시간을 겟~⭐️</h1>\n                <div className=\"container\">\n                    <div className=\"signUp_div\">\n                        <NavLink to=\"/signup\" className=\"signUp_link\">\n                            아직 회원이 아니신가요?\n              </NavLink>\n                    </div>\n                    <img\n                        id=\"sign_in_img\"\n                        //   src=\"https://t1.daumcdn.net/cfile/tistory/992C413B5D2ACF7C1D\"\n                        src={logo}\n                    ></img>\n                    {/*-------------- e-mail pw 입력칸 ----------------- */}\n                    <form onSubmit={(e) => e.preventDefault()}>\n                        <div className=\"container1\">\n                            <div className=\"email_div\">\n                                <span className=\"email_span\">e-mail</span>\n                                <input\n                                    type=\"email\"\n                                    onChange={hadleInputValue(\"email\")}\n                                ></input>\n                            </div>\n                            <div className=\"PW_div\">\n                                <span>PW</span>\n                                <input\n                                    type=\"password\"\n                                    onChange={hadleInputValue(\"password\")}\n                                ></input>\n                            </div>\n                        </div>\n                        <div className=\"findAccount_span\">\n                            <span>\n                                <NavLink to=\"/findaccount\" className=\"findAccount_link\">\n                                    e-mail | PW 찾기\n                  </NavLink>\n                            </span>\n                        </div>\n                        <div>\n                            {/* <NavLink to=\"/todo\"> */}\n                            <button\n                                className=\"loginButton\"\n                                type=\"submit\"\n                                onClick={handleSignIn}\n                            >\n                                로그인\n                </button>\n                            {/* </NavLink> */}\n                            <div>\n                                <button className=\"loginButton\" type=\"submit\">\n                                    Github 로그인\n                  </button>\n                            </div>\n                            <div className=\"alert-box\">{userInfo.errorMessage}</div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SignInModal;\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoTemplate.js",["136","137"],"import React from \"react\";\nimport \"./TodoStyle/TodoTemplate.scss\";\n\nconst TodoTemplate = ({ children }) => {\n  return (\n    <div className=\"appTemplate\">\n      <div className=\"appTitle\">&#128540; SET TO-DO!</div>\n      <div className=\"appContent\">{children}</div>\n    </div>\n  );\n};\n\nexport default TodoTemplate;\n",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/_actions/todo_action.js",["138","139","140","141","142","143"],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Todo/TodoList.js",[],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/routes/ToDo.js",["144","145","146","147","148"],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/SignUp.tsx",["149","150","151","152"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { NavLink } from \"react-router-dom\";\n\n//fakedate\n// import user from \"../test_data_user.json\";\n\n\nfunction SignUpModal(props: any) {\n\n  const [info, setInfo] = useState<{\n    name: string;\n    password: string;\n    email: string;\n    mobile: string;\n    duplicatedIdMsg: string;\n    errorMessage: string,\n    errorMessageMobile: string,\n    errorMessageEmail: string,\n  }>({\n    name: \"\",\n    password: \"\",\n    email: \"\",\n    mobile: \"\",\n    duplicatedIdMsg: \"\",\n    errorMessage: \"\",\n    errorMessageMobile: \"\",\n    errorMessageEmail: \"\",\n  })\n\n\n  /* //! 백앤드 분들께 구현 요청하기 due to sign up function flows \n    //* 연락처 형식 헬퍼 함수: '-' 삽입 필수\n    notFormedMobileNum = () => {\n      const { mobile } = this.state;\n      const userIdInfo = {\n        mobile: mobile,\n      };\n      let count = 0;\n      for (let i = 0; i < userIdInfo.mobile.length; i++) {\n        if (userIdInfo.mobile[i] === \"-\") {\n          count++;\n          if (count === 2) {\n            console.log(\"c\", count);\n            return;\n          }\n        }\n      }\n      this.setState({\n        errorMessageMobile: \"'-'를 입력해주세요.\"\n      });\n    };\n   */\n\n  // 중복확인 --> 백앤드 팀원들에게 구현했는지 물어보기 우선, 기능플로우 부터 확인.\n  //fakedata 이용\n  const handleClickduplicatedId = () => {\n    const { email, duplicatedIdMsg } = info\n    const userInfo = {\n      email: email,\n      message: duplicatedIdMsg,\n    };\n\n    axios\n      .post(\"https://api.get-todo.com/searchinfo/overlapEmail\", userInfo)\n      .then((response) => {\n        console.log(\"중복이메일?\", response);\n        setInfo({\n          ...info,\n          duplicatedIdMsg: response.data\n        })\n        // alert(info.duplicatedIdMsg)\n        setInfo({\n          ...info,\n          duplicatedIdMsg: \"\"\n        })\n      })\n      .catch((error) => {\n        setInfo({\n          ...info,\n          duplicatedIdMsg: error.response.data\n        })\n        // alert(info.duplicatedIdMsg)\n      })\n\n\n    /* fakeData 사용 코드\n    for (let i = 0; i < user.length; i++) {\n      if (!userInfo.email.length) {\n        return alert(\"항목을 입력해주세요.\");\n        \n      }\n      else if (userInfo.email === user[i].email) {\n        return alert(\"이미 존재하는 e-mail입니다.\");\n      }\n      else if (!userInfo.email.includes('@') || !userInfo.email.includes('.')) {\n        return alert(\"이메일 형식을 지켜주세요. ex) @, .com 등\");\n      }\n    }\n    return alert(\"사용이 가능한 e-mail입니다.\");*/\n  };\n  useEffect(() => { // axios와 같은 fetch 비동기 해결(state 적용되는 속도 맞추기 위함)\n    if (info.duplicatedIdMsg.length > 0) {\n      try {\n        alert(info.duplicatedIdMsg)\n      }\n      catch {\n        console.log(\"주의 메시지가 없습니다.\")\n      }\n    }\n  })\n\n  const handleInPutValue = (key: string) => (text: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"잘 입력되나?\");\n    // console.log('k', key)\n    // console.log('t', text)\n    setInfo({\n      ...info,\n      [key]: text.target.value,\n    });\n    console.log(text);\n  };\n\n  // 회원가입한 새로운 유저 정보를 데이터 베이스에 저장한다.\n  // 서버에 회원가입을 요청 후 로그인 페이지로 이동한다.\n  const handClickAddNewUserInfo = () => {\n    const { name, password, email, mobile } = info\n    const NewUserInformation = {\n      name: name,\n      password: password,\n      email: email,\n      mobile: mobile,\n    };\n\n    // 신규 등록 회원 정보를 서버로 전달 서버 -> DB -> DB 저장 후 해당 정보를 response에 담아서 클라이언트로 재 전송될 것.\n\n    // if (\n    //   NewUserInformation.email.length &&\n    //   NewUserInformation.password.length &&\n    //   NewUserInformation.name.length &&\n    //   NewUserInformation.mobile.length\n    // ) {\n    //   this.notFormedMobileNum();  //! 코드 순서 때문에 알고리즘 무용지물. 백앤드분들께 -- 규칙 적용해달라 요청하기.\n    // }\n\n    axios\n      .post(\"https://api.get-todo.com/signup\", NewUserInformation)\n      .then((response) => {\n        console.log(\"res\", response);\n        alert(\"회원가입이 완료되었습니다. 로그인을 해주세요.\")\n        props.history.push(\"/\");\n      })\n      .catch((error) => {\n        console.log(\"err\", error.response);\n        setInfo({\n          ...info,\n          errorMessage: error.response.data,\n        });\n      });\n\n    /*  fake Data\n         if (\n          !NewUserInformation.email.length ||\n          !NewUserInformation.password.length ||\n          !NewUserInformation.name.length ||\n          !NewUserInformation.mobile.length\n        ) {\n          this.setState({\n            errorMessage: \"모든 항목은 필수입니다.\",\n          });\n        } else if (\n          NewUserInformation.email.length &&\n          NewUserInformation.password.length &&\n          NewUserInformation.name.length &&\n          NewUserInformation.mobile.length\n        ) {\n          this.notFormedMobileNum();\n        } */\n\n    //! 해당 신규 유저의 정보를 서버로 post 요청을 한 후(DB추가 등),  res로 응답코드를 받든 뭐든 받으면 로그인 페이지로 리다이렉트\n    //* 서버 통신시 아래 코드를 테스트해보고 사용하기\n    /*     else {\n      axios.post('http', NewUserInformation)\n      .then(response => {\n        this.props.history.push(\"/\")\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: \"회원가입에 실패했습니다. 다시 시도해주세요.\"\n        })\n      })\n    } */\n  };\n\n\n  // console.log('user', user)\n  // console.log(this.props)\n  return (\n    <div className=\"modal\">\n      <div className=\"modal_overlay\"></div>\n      <div className=\"modal_content\">\n        <h1>회원 가입</h1>\n\n        <div className=\"container\">\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <div className=\"container1\">\n              <div className=\"inputInfo\">\n                <span className=\"email_span\">e-mail</span>\n                <input\n                  type=\"email\"\n                  onChange={handleInPutValue(\"email\")}\n                ></input>\n                <button\n                  className=\"check\"\n                  onClick={handleClickduplicatedId}\n                >\n                  중복 확인\n                  </button>\n                {/* <div>{info.duplicatedIdMsg}</div> */}\n              </div>\n\n              <div>\n                <span>PW</span>\n                <input\n                  type=\"password\"\n                  onChange={handleInPutValue(\"password\")}\n                ></input>\n              </div>\n\n              <div>\n                <span>고객명</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInPutValue(\"name\")}\n                ></input>\n              </div>\n\n              <div>\n                <span>연락처</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInPutValue(\"mobile\")}\n                ></input>\n                <div>{info.errorMessageMobile}</div>\n              </div>\n            </div>\n            <div>\n              <div>{info.errorMessage}</div>\n\n              {/* <NavLink to='' className='signUp_link'> */}\n              <button\n                className=\"signUp_btn\"\n                onClick={handClickAddNewUserInfo}\n              >\n                회원 가입\n                </button>\n              {/* </NavLink> */}\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default SignUpModal;\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_account.tsx",["153","154","155","156","157"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { NavLink } from \"react-router-dom\";\nimport { string } from \"prop-types\";\nimport Button from \"./Button\";\n\n//Fake Data\n// import user from \"../test_data_user.json\";\n\nfunction FindAccount({ history }: any) {\n\n  const [info, setInfo] = useState<{\n    email: string;\n    name: string;\n    mobile: string;\n    errorMessageEmail: string;\n    errorMessagePw: string;\n  }>({\n    email: \"\",\n    name: \"\",\n    mobile: \"\",\n    errorMessageEmail: \"\",\n    errorMessagePw: \"\",\n  })\n\n  const handleInputValue = (key: string) => (text: React.ChangeEvent<HTMLInputElement>): void => {\n    console.log(\"질입력되나?\");\n    // console.log('k', key)\n    // console.log('t', text)\n    setInfo({\n      ...info,\n      [key]: text.target.value,\n    });\n  };\n\n  /* //! 백앤드 분들께 구현 요청하기 due to sign up function flows \n    //* 연락처 형식 헬퍼 함수: '-' 삽입 필수\n    notFormedMobileNumOnFindEmail = () => {\n      const { mobile } = this.state;\n      const userIdInfo = {\n        mobile: mobile,\n      };\n      let count = 0;\n      for (let i = 0; i < userIdInfo.mobile.length; i++) {\n        if (userIdInfo.mobile[i] === \"-\") {\n          count++;\n          if (count === 2) {\n            console.log(\"c\", count);\n            return;\n          }\n        }\n      }\n      this.setState({\n        errorMessageEmail: \"'-'를 입력해주세요.\",\n      });\n    }; \n\n  notFormedMobileNumOnFindPw = () => {\n    const { mobile } = this.state;\n    const userIdInfo = {\n      mobile: mobile,\n    };\n    let count = 0;\n    for (let i = 0; i < userIdInfo.mobile.length; i++) {\n      if (userIdInfo.mobile[i] === \"-\") {\n        count++;\n        if (count === 2) {\n          console.log(\"c\", count);\n          return;\n        }\n      }\n    }\n    this.setState({\n      errorMessagePw: \"'-'를 입력해주세요.\",\n    });\n  };*/\n  //*----------------------------------\n\n  const handleFindEmailValue = (): void => {\n    const { email, name, mobile } = info;\n    const userIdInfo = {\n      name: name,\n      mobile: mobile,\n    };\n\n    if (!userIdInfo.name.length || !userIdInfo.mobile.length) {\n      setInfo({\n        ...info,\n        errorMessageEmail: \"모든 항목을 입력하세요.\",\n      });\n    } else {\n      axios\n        .post(\"https://api.get-todo.com/searchinfo/email\", userIdInfo)\n        .then((response) => {\n          history.push({\n            pathname: \"/useremail\",\n            state: response.data, // CompletedFindEmail에 props로 입력 값 넘겨주기\n          });\n        })\n        .catch((error) => {\n          setInfo({\n            ...info,\n            errorMessageEmail: error.response.data,\n          });\n        });\n    }\n\n    /*     fakedata 용 코드\n        \n            for (let i = 0; i < user.length; i++) {\n              if (\n                userIdInfo.name === user[i].name &&\n                userIdInfo.mobile === user[i].mobile\n              ) {\n                // console.log(this.props)\n                this.props.history.push({\n                  pathname: \"/useremail\",\n                  state: { name: user[i].name, email: user[i].email },\n                }); // CompletedFindEmail에 props로 입력 값 넘겨주기\n              } else if (!userIdInfo.name.length || !userIdInfo.mobile.length) {\n                this.setState({\n                  errorMessageEmail: \"모든 항목을 입력하세요.\",\n                });\n              } else if (\n                userIdInfo.name !== user[i].name ||\n                userIdInfo.mobile !== user[i].mobile\n              ) {\n                this.setState({\n                  errorMessageEmail: \"일치하는 e-mail이 없습니다.\",\n                });\n                // this.notFormedMobileNumOnFindEmail();\n              }\n            } */\n  };\n\n  const handleFindPwValue = (): void => {\n    const { email, name, mobile } = info;\n    const userPwInfo = {\n      email: email,\n      name: name,\n      mobile: mobile,\n    };\n\n    if (\n      !userPwInfo.email.length ||\n      !userPwInfo.name.length ||\n      !userPwInfo.mobile.length\n    ) {\n      setInfo({\n        ...info,\n        errorMessagePw: \"모든 항목을 입력하세요.\",\n      });\n    } else {\n      axios\n        .post(\"https://api.get-todo.com/searchinfo/password\", userPwInfo)\n        .then((response) => {\n          history.push({\n            pathname: \"/userpw\",\n            state: response.data,\n          });\n        })\n        .catch((error) => {\n          console.log(error.response);\n          setInfo({\n            ...info,\n            errorMessagePw: error.response.data,\n          });\n        });\n    }\n\n    /*     fakedata 용 코드\n       for (let i = 0; i < user.length; i++) {\n         if (\n           userPwInfo.email === user[i].email &&\n           userPwInfo.name === user[i].name &&\n           userPwInfo.mobile === user[i].mobile\n         ) {\n           this.props.history.push({\n             pathname: \"userpw\",\n             state: { pw: user[i].password },\n           });\n         } else if (\n           !userPwInfo.email.length ||\n           !userPwInfo.name.length ||\n           !userPwInfo.mobile.length\n         ) {\n           this.setState({\n             errorMessagePw: \"모든 항목을 입력하세요.\",\n           });\n         } else if (\n           userPwInfo.email !== user[i].email ||\n           userPwInfo.name !== user[i].name ||\n           userPwInfo.mobile !== user[i].mobile\n         ) {\n           this.setState({\n             errorMessagePw: \"비밀번호를 찾지 못하였습니다.\",\n           });\n           // this.notFormedMobileNumOnFindPw(); // 연락처 형식 맞추는게 우선순위이니.\n         }\n       } */\n  };\n\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal_overlay\"></div>\n      <div className=\"modal_content\">\n        {/* -----------------이메일 찾기------------------ */}\n\n        <h2>e-mail 찾기</h2>\n\n        <div className=\"container\">\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className=\"find_e-mail_box\">\n              <div>\n                <span>고객명</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInputValue(\"name\")}\n                ></input>\n              </div>\n\n              <div>\n                <span>연락처</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInputValue(\"mobile\")}\n                ></input>\n              </div>\n            </div>\n\n            <div>{info.errorMessageEmail}</div>\n            {/* <NavLink to='/useremail'> */}\n            <Button className=\"findBtn\" onClick={handleFindEmailValue}>\n              e-mail 찾기\n              </Button>\n            {/* </NavLink> */}\n          </form>\n\n          <div className=\"line\"> </div>\n\n          {/* -----------------패스워드 찾기------------------ */}\n\n          <h2>PW 찾기</h2>\n          {/* 바로 아랫 줄 코드. 이메일 형식이 안맞으면 말풍선으로 에러 메세지 띄움 */}\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className=\"find_pw_box\">\n              <div className=\"inputInfo\">\n                <span className=\"email_span\">e-mail</span>\n                <input\n                  type=\"email\"\n                  onChange={handleInputValue(\"email\")}\n                ></input>\n              </div>\n              <div>\n                <span>고객명</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInputValue(\"name\")}\n                ></input>\n              </div>\n\n              <div>\n                <span>연락처</span>\n                <input\n                  type=\"text\"\n                  onChange={handleInputValue(\"mobile\")}\n                ></input>\n              </div>\n            </div>\n            <div>{info.errorMessagePw}</div>\n\n            {/* <NavLink to='/userpw'> */}\n            <Button className=\"findBtn\" onClick={handleFindPwValue}>\n              PW 찾기\n              </Button>\n            {/* </NavLink> */}\n          </form>\n\n          <NavLink to=\"\" className=\"signUp_link\">\n            <Button className=\"signUp_btn\">로그인 페이지로 돌아가기</Button>\n          </NavLink>\n\n          <NavLink to=\"/signup\" className=\"signUp_link\">\n            <Button className=\"signUp_btn\">회원 가입</Button>\n          </NavLink>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default FindAccount;\n","/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_Email_completed.tsx",["158","159","160"],"/Users/john/Desktop/17->19/codestates/real_first_pro/client/src/components/Find_PW_completed.tsx",["161","162","163"],{"ruleId":"164","severity":1,"message":"165","line":1,"column":16,"nodeType":"166","messageId":"167","endLine":1,"endColumn":45},{"ruleId":"164","severity":1,"message":"168","line":1,"column":38,"nodeType":"169","messageId":"170","endLine":1,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":1,"column":17,"nodeType":"169","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"171","severity":1,"message":"174","line":13,"column":8,"nodeType":"169","messageId":"173","endLine":13,"endColumn":21},{"ruleId":"164","severity":1,"message":"165","line":22,"column":1,"nodeType":"166","messageId":"167","endLine":22,"endColumn":15},{"ruleId":"175","severity":1,"message":"176","line":41,"column":38,"nodeType":"177","messageId":"178","endLine":41,"endColumn":41,"suggestions":"179"},{"ruleId":"171","severity":1,"message":"180","line":43,"column":9,"nodeType":"169","messageId":"173","endLine":43,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":113,"column":36,"nodeType":"177","messageId":"178","endLine":113,"endColumn":39,"suggestions":"181"},{"ruleId":"175","severity":1,"message":"176","line":120,"column":34,"nodeType":"177","messageId":"178","endLine":120,"endColumn":37,"suggestions":"182"},{"ruleId":"175","severity":1,"message":"176","line":20,"column":36,"nodeType":"177","messageId":"178","endLine":20,"endColumn":39,"suggestions":"183"},{"ruleId":"164","severity":1,"message":"165","line":22,"column":16,"nodeType":"184","messageId":"167","endLine":22,"endColumn":26},{"ruleId":"164","severity":1,"message":"185","line":22,"column":17,"nodeType":"169","messageId":"170","endLine":22,"endColumn":22},{"ruleId":"171","severity":1,"message":"186","line":2,"column":16,"nodeType":"169","messageId":"173","endLine":2,"endColumn":23},{"ruleId":"171","severity":1,"message":"187","line":6,"column":8,"nodeType":"169","messageId":"173","endLine":6,"endColumn":14},{"ruleId":"175","severity":1,"message":"176","line":17,"column":29,"nodeType":"177","messageId":"178","endLine":17,"endColumn":32,"suggestions":"188"},{"ruleId":"175","severity":1,"message":"176","line":37,"column":29,"nodeType":"177","messageId":"178","endLine":37,"endColumn":32,"suggestions":"189"},{"ruleId":"171","severity":1,"message":"186","line":3,"column":10,"nodeType":"169","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"171","severity":1,"message":"190","line":3,"column":19,"nodeType":"169","messageId":"173","endLine":3,"endColumn":38},{"ruleId":"171","severity":1,"message":"191","line":5,"column":8,"nodeType":"169","messageId":"173","endLine":5,"endColumn":28},{"ruleId":"171","severity":1,"message":"192","line":1,"column":10,"nodeType":"169","messageId":"173","endLine":1,"endColumn":16},{"ruleId":"171","severity":1,"message":"193","line":3,"column":10,"nodeType":"169","messageId":"173","endLine":3,"endColumn":14},{"ruleId":"175","severity":1,"message":"176","line":28,"column":40,"nodeType":"177","messageId":"178","endLine":28,"endColumn":43,"suggestions":"194"},{"ruleId":"175","severity":1,"message":"176","line":36,"column":22,"nodeType":"177","messageId":"178","endLine":36,"endColumn":25,"suggestions":"195"},{"ruleId":"171","severity":1,"message":"196","line":9,"column":66,"nodeType":"169","messageId":"173","endLine":9,"endColumn":71},{"ruleId":"171","severity":1,"message":"197","line":1,"column":28,"nodeType":"169","messageId":"173","endLine":1,"endColumn":43},{"ruleId":"171","severity":1,"message":"198","line":6,"column":10,"nodeType":"169","messageId":"173","endLine":6,"endColumn":13},{"ruleId":"171","severity":1,"message":"199","line":6,"column":15,"nodeType":"169","messageId":"173","endLine":6,"endColumn":21},{"ruleId":"171","severity":1,"message":"192","line":6,"column":23,"nodeType":"169","messageId":"173","endLine":6,"endColumn":29},{"ruleId":"171","severity":1,"message":"200","line":50,"column":40,"nodeType":"169","messageId":"173","endLine":50,"endColumn":52},{"ruleId":"164","severity":1,"message":"165","line":4,"column":22,"nodeType":"184","messageId":"167","endLine":4,"endColumn":39},{"ruleId":"164","severity":1,"message":"201","line":4,"column":23,"nodeType":"202","messageId":"203","endLine":4,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":31},{"ruleId":"164","severity":1,"message":"204","line":4,"column":26,"nodeType":"169","messageId":"170","endLine":4,"endColumn":30},{"ruleId":"164","severity":1,"message":"165","line":13,"column":8,"nodeType":"166","messageId":"167","endLine":13,"endColumn":37},{"ruleId":"164","severity":1,"message":"204","line":13,"column":32,"nodeType":"169","messageId":"170","endLine":13,"endColumn":36},{"ruleId":"164","severity":1,"message":"165","line":22,"column":8,"nodeType":"166","messageId":"167","endLine":22,"endColumn":36},{"ruleId":"164","severity":1,"message":"204","line":22,"column":31,"nodeType":"169","messageId":"170","endLine":22,"endColumn":35},{"ruleId":"171","severity":1,"message":"205","line":1,"column":27,"nodeType":"169","messageId":"173","endLine":1,"endColumn":33},{"ruleId":"171","severity":1,"message":"172","line":1,"column":48,"nodeType":"169","messageId":"173","endLine":1,"endColumn":57},{"ruleId":"171","severity":1,"message":"206","line":2,"column":8,"nodeType":"169","messageId":"173","endLine":2,"endColumn":13},{"ruleId":"171","severity":1,"message":"207","line":27,"column":17,"nodeType":"169","messageId":"173","endLine":27,"endColumn":25},{"ruleId":"171","severity":1,"message":"208","line":121,"column":33,"nodeType":"169","messageId":"173","endLine":121,"endColumn":39},{"ruleId":"171","severity":1,"message":"186","line":3,"column":10,"nodeType":"169","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"164","severity":1,"message":"165","line":9,"column":1,"nodeType":"166","messageId":"167","endLine":9,"endColumn":33},{"ruleId":"164","severity":1,"message":"209","line":9,"column":22,"nodeType":"169","messageId":"210","endLine":9,"endColumn":32},{"ruleId":"175","severity":1,"message":"176","line":9,"column":29,"nodeType":"177","messageId":"178","endLine":9,"endColumn":32,"suggestions":"211"},{"ruleId":"171","severity":1,"message":"192","line":4,"column":10,"nodeType":"169","messageId":"173","endLine":4,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":10,"column":1,"nodeType":"166","messageId":"167","endLine":10,"endColumn":39},{"ruleId":"164","severity":1,"message":"212","line":10,"column":22,"nodeType":"202","messageId":"213","endLine":10,"endColumn":38},{"ruleId":"175","severity":1,"message":"176","line":10,"column":35,"nodeType":"177","messageId":"178","endLine":10,"endColumn":38,"suggestions":"214"},{"ruleId":"171","severity":1,"message":"215","line":80,"column":13,"nodeType":"169","messageId":"173","endLine":80,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":6,"column":1,"nodeType":"166","messageId":"167","endLine":6,"endColumn":47},{"ruleId":"164","severity":1,"message":"212","line":6,"column":29,"nodeType":"202","messageId":"213","endLine":6,"endColumn":46},{"ruleId":"175","severity":1,"message":"176","line":6,"column":43,"nodeType":"177","messageId":"178","endLine":6,"endColumn":46,"suggestions":"216"},{"ruleId":"164","severity":1,"message":"165","line":5,"column":1,"nodeType":"166","messageId":"167","endLine":5,"endColumn":44},{"ruleId":"164","severity":1,"message":"212","line":5,"column":26,"nodeType":"202","messageId":"213","endLine":5,"endColumn":43},{"ruleId":"175","severity":1,"message":"176","line":5,"column":40,"nodeType":"177","messageId":"178","endLine":5,"endColumn":43,"suggestions":"217"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'action' should be typed.","Identifier","missingArgType","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","unusedVar","'ImportantTodo' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["218","219"],"'History' is assigned a value but never used.",["220","221"],["222","223"],["224","225"],"ArrowFunctionExpression","Argument 'props' should be typed.","'NavLink' is defined but never used.","'Remove' is defined but never used.",["226","227"],["228","229"],"'RouteComponentProps' is defined but never used.","'ReactRouterPropTypes' is defined but never used.","'string' is defined but never used.","'Link' is defined but never used.",["230","231"],["232","233"],"'props' is defined but never used.","'useLayoutEffect' is defined but never used.","'any' is defined but never used.","'number' is defined but never used.","'errorMessage' is assigned a value but never used.","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","Argument 'body' should be typed.","'useRef' is defined but never used.","'Axios' is defined but never used.","'setTodos' is assigned a value but never used.","'todoId' is defined but never used.","Argument 'props' should be typed with a non-any type.","anyTypedArg",["234","235"],"Object pattern argument should be typed with a non-any type.","anyTypedArgUnnamed",["236","237"],"'email' is assigned a value but never used.",["238","239"],["240","241"],{"messageId":"242","fix":"243","desc":"244"},{"messageId":"245","fix":"246","desc":"247"},{"messageId":"242","fix":"248","desc":"244"},{"messageId":"245","fix":"249","desc":"247"},{"messageId":"242","fix":"250","desc":"244"},{"messageId":"245","fix":"251","desc":"247"},{"messageId":"242","fix":"252","desc":"244"},{"messageId":"245","fix":"253","desc":"247"},{"messageId":"242","fix":"254","desc":"244"},{"messageId":"245","fix":"255","desc":"247"},{"messageId":"242","fix":"256","desc":"244"},{"messageId":"245","fix":"257","desc":"247"},{"messageId":"242","fix":"258","desc":"244"},{"messageId":"245","fix":"259","desc":"247"},{"messageId":"242","fix":"260","desc":"244"},{"messageId":"245","fix":"261","desc":"247"},{"messageId":"242","fix":"262","desc":"244"},{"messageId":"245","fix":"263","desc":"247"},{"messageId":"242","fix":"264","desc":"244"},{"messageId":"245","fix":"265","desc":"247"},{"messageId":"242","fix":"266","desc":"244"},{"messageId":"245","fix":"267","desc":"247"},{"messageId":"242","fix":"268","desc":"244"},{"messageId":"245","fix":"269","desc":"247"},"suggestUnknown",{"range":"270","text":"271"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"270","text":"272"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"273","text":"271"},{"range":"273","text":"272"},{"range":"274","text":"271"},{"range":"274","text":"272"},{"range":"275","text":"271"},{"range":"275","text":"272"},{"range":"276","text":"271"},{"range":"276","text":"272"},{"range":"277","text":"271"},{"range":"277","text":"272"},{"range":"278","text":"271"},{"range":"278","text":"272"},{"range":"279","text":"271"},{"range":"279","text":"272"},{"range":"280","text":"271"},{"range":"280","text":"272"},{"range":"281","text":"271"},{"range":"281","text":"272"},{"range":"282","text":"271"},{"range":"282","text":"272"},{"range":"283","text":"271"},{"range":"283","text":"272"},[1229,1232],"unknown","never",[2823,2826],[3187,3190],[488,491],[420,423],[823,826],[670,673],[786,789],[211,214],[274,277],[146,149],[142,145]]